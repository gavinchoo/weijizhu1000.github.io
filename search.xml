<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React + Webpack多入口打包配置（一）基础配置快速打包，优化打包速度]]></title>
    <url>%2F2018%2F12%2F23%2Freact%2FReact%2BWebpack%E5%A4%9A%E5%85%A5%E5%8F%A3%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 安装编译插件编译 jsx、es6、scss 等资源 ● 使用 bael 和 babel-loader 编译 jsx、es6 ● 安装插件: babel-preset-es2015 用于解析 es6 ● 安装插件：babel-preset-react 用于解析 jsx 安装插件1234$ npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-stage-0 babel-preset-react// 安装loader$ npm i --save-dev css less css-loader less-loader style-loader .babelrc配置文件1&#123; &quot;presets&quot;: [&quot;es2015&quot;,&quot;react&quot;,&quot;stage-0&quot;] &#125; 在工程根目录下创建webpack文件夹，所有的webpack相关配置都写在该文件夹下。 2. 配置打包参数：Loader、输出路径、打包插件新建文件夹config #####2.1 新建module.config.js 配置打包loader这里使用Happypack打包插件，多线程打包，可以加快打包速度。12345678910111213141516171819var path = require('path')var nodeModulesPath = path.join(__dirname, '/node_modules');module.exports = &#123; noParse: [ path.join(nodeModulesPath, '/react/dist/react.min'), path.join(nodeModulesPath, '/react-dom/dist/react-dom.min'), ], loaders: [ &#123;test: /\.(css|less)$/, loader: 'happypack/loader?id=happybabelstyles'&#125;, &#123; test: /\.scss$/, loader: 'style-loader!css-loader?modules&amp;importLoaders=2&amp;sourceMap&amp;localIdentName=[local]___[hash:base64:5]!autoprefixer?browsers=last 2 version!sass-loader?outputStyle=expanded&amp;sourceMap' &#125;, &#123;test: /\.(gif|jpg|png)$/, loader: 'url-loader?limit=8192&amp;name=images/[name].[hash].[ext]'&#125;, &#123;test: /\.js$/, exclude: /node_modules/, loader: 'happypack/loader?id=happybabeljs'&#125;, &#123;test: /\.json$/, loader: 'json-loader'&#125;, &#123;test: /\.(woff|woff2|svg|eot|ttf)$/, loader: 'url-loader?limit=50000&amp;name=fonts/[name].[hash].[ext]'&#125; ]&#125; 2.2 新建output.config.js 配置包输出路径这里 配置打包输出的文件放在public/build目录下， 因为在NodeJS服务配置该目录下为static文件，可以访问。1234567var path = require('path')module.exports = &#123; path: path.join(__dirname, '../public/build'), publicPath: '/build/', filename: '[name].bundle.js'&#125; 2.3 新建plugins.config.js 配置打包插件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667var os = require('os')var webpack = require('webpack')const HtmlWebpackPlugin = require('html-webpack-plugin')const CompressionPlugin = require("compression-webpack-plugin")var HappyPack = require('happypack');var HappyThreadPool = HappyPack.ThreadPool(&#123;size: os.cpus().length&#125;);const bundleConfig = require("./json/bundle-config.json");const &#123;entryConfig&#125; = require("./entry.config")var htmlPlugins = []for (var key in entryConfig.web)&#123; htmlPlugins.push(new HtmlWebpackPlugin(&#123; template: './webpack/template/index.ejs', filename: `$&#123;key.replace('/', '/assets/')&#125;.ejs`, chunks: ['vendor', key], bundleName: bundleConfig.vendor.js, &#125;))&#125;for (var key in entryConfig.mobile)&#123; htmlPlugins.push(new HtmlWebpackPlugin(&#123; template: './webpack/template/mobile.ejs', filename: `$&#123;key.replace('/', '/assets/')&#125;.ejs`, chunks: ['vendor', key], bundleName: bundleConfig.vendor.js, &#125;))&#125;htmlPlugins.push(new HtmlWebpackPlugin(&#123; template: './webpack/template/404.ejs', filename: 'common/view/404.ejs', chunks: [],&#125;))htmlPlugins.push(new HtmlWebpackPlugin(&#123; template: './webpack/template/error.ejs', filename: 'common/view/error.ejs', chunks: [],&#125;))module.exports = [ new webpack.DllReferencePlugin(&#123; context: __dirname, manifest: require('./json/vendor-manifest.json') &#125;), new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/), new webpack.DefinePlugin(&#123; 'process.env.NODE_ENV': JSON.stringify('production') &#125;), new HappyPack(&#123; id: 'happybabeljs', loaders: ['babel-loader'], threadPool: HappyThreadPool, &#125;), new HappyPack(&#123; id: 'happybabelstyles', threadPool: HappyThreadPool, loaders: ['style-loader', 'css-loader', 'less-loader'] &#125;), new CompressionPlugin(&#123; asset: "[path].gz[query]", algorithm: "gzip", test: /\.js$|\.css$|\.html$/, threshold: 10240, minRatio: 0 &#125;),].concat(htmlPlugins) 3. 配置打包脚本，预编译公共代码、资源创建build文件夹。 3.1 公共代码打包脚本webpack.dll.config.js使用webpack.DllPlugin和webpack.DllReferencePlugin静态资源预编译 在build新建一个webpack.dll.config.js ： 使用assets-webpack-plugin将bundle的文件名输出，保存成json，在打包业务代码时配合html-webpack-plugin插件，将bundle添加到index.html中1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556var os = require('os')var path = require("path");var webpack = require("webpack");var CompressionPlugin = require("compression-webpack-plugin")const UglifyJSPlugin = require('uglifyjs-webpack-plugin');const AssetsPlugin = require('assets-webpack-plugin');var HappyPack = require('happypack');var HappyThreadPool = HappyPack.ThreadPool(&#123; size: os.cpus().length &#125;);const moduleConfig = require("../module.config")module.exports = &#123; entry: &#123; vendor: ['react', 'react-dom', 'react-router-dom', 'moment'], &#125;, output: &#123; path: path.join(__dirname, '../../public/build/dll'), // 打包后文件输出的位置 publicPath: '/build/dll/', filename: '[name].bundle.js', library: '[name]_library' // vendor.dll.js中暴露出的全局变量名。 // 主要是给DllPlugin中的name使用， // 故这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。 &#125;, module: moduleConfig, plugins: [ new UglifyJSPlugin(), new webpack.DllPlugin(&#123; path: path.join(__dirname, '../json', '[name]-manifest.json'), name: '[name]_library', context: __dirname &#125;), new AssetsPlugin(&#123; filename: 'bundle-config.json', path: path.join(__dirname, '../json') &#125;), new CompressionPlugin(&#123; asset: "[path].gz[query]", algorithm: "gzip", test: /\.js$|\.css$|\.html$/, threshold: 10240, minRatio: 0 &#125;), new HappyPack(&#123; id: 'happybabeljs', loaders: ['babel-loader'], threadPool: HappyThreadPool, &#125;), new HappyPack(&#123; id: 'happybabelstyles', threadPool: HappyThreadPool, loaders: [ 'style-loader', 'css-loader', 'less-loader' ] &#125;), new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/), ]&#125;; 3.2 测试环境打包脚本webpack.dev.config.js新建webpack.dev.config.js文件，在plugins字段中增加DllReferencePlugin插件，1234567891011121314151617181920var webpack = require(&apos;webpack&apos;)var BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPluginconst moduleConfig = require(&quot;../config/module.config&quot;)const pluginConfig = require(&quot;../config/plugins.config&quot;)const outputConfig = require(&apos;../config/output.config&apos;)var &#123; allEntry &#125; = require(&quot;../../src/entries/index&quot;)var allEntryConfig = allEntry()module.exports = &#123; devtool: &apos;eval&apos;, // 构建快：eval 调试使用， 构建慢：source-map 生产使用 entry: allEntryConfig, output: outputConfig, module: moduleConfig, plugins: [ new BundleAnalyzerPlugin(), new webpack.HotModuleReplacementPlugin(), ].concat(pluginConfig),&#125; webpack.dev.config.js引用pluginconfig, 所有在plugins.config.js文件种添加下面代码1234new webpack.DllReferencePlugin(&#123; context: __dirname, manifest: require(&apos;./public/build/vendor-manifest.json&apos;)&#125;), 3.3 正式环境打包脚本webpack.config.js123456789101112131415161718192021var webpack = require(&apos;webpack&apos;)const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);const pluginConfig = require(&quot;../plugins.config&quot;)const moduleConfig = require(&quot;../module.config&quot;)const outputConfig = require(&apos;../output.config&apos;)var &#123; allEntry &#125; = require(&quot;../entry.config&quot;)const allEntryConfig = allEntry()module.exports = &#123; devtool: &apos;source-map&apos;, // 构建快：eval 调试使用， 构建慢：source-map 生产使用 entry: allEntryConfig, output: outputConfig, module: moduleConfig, plugins: [ new UglifyJSPlugin(), new webpack.HotModuleReplacementPlugin(), ].concat(pluginConfig),&#125; 3.4 开发环境使用webpack-dev-server测试服务器创建webpack.dev.server.config.js文件，配置webpack-dev-server 插件，该插件使开发调试代码运行在内存中， 支持热更新， 避免每次在本地打包生成很多hot-update文件。123456789101112131415161718192021222324252627282930313233var webpack = require(&apos;webpack&apos;)const moduleConfig = require(&quot;../config/module.config&quot;)const pluginConfig = require(&quot;../config/plugins.config&quot;)const outputConfig = require(&apos;../config/output.config&apos;)var &#123; allEntry &#125; = require(&quot;../../src/entries/index&quot;)var allEntryConfig = allEntry()module.exports = &#123; devtool: &apos;eval&apos;, // 构建快：eval 调试使用， 构建慢：source-map 生产使用 entry: allEntryConfig, output: outputConfig, module: moduleConfig, plugins: [ new webpack.HotModuleReplacementPlugin(), ].concat(pluginConfig), devServer: &#123; contentBase: &apos;dist&apos;, //默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到&quot;build&quot;目录） historyApiFallback: true, //在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html compress: true, // 开启gzip压缩 hot: true, host: &apos;0.0.0.0&apos;, // 同一局域网段下，可以通过IP (192.168.X.X:8000) 访问 inline: true, //设置为true，当源文件改变时会自动刷新页面 port: 8002, //设置默认监听端口，如果省略，默认为&quot;8080&quot; proxy: &#123; // 设置代理解决跨域问题 &apos;/&apos;: &#123; target: &apos;http://localhost:8000/&apos;, // 目标服务器地址 secure: false, withCredentials: true &#125; &#125; &#125;&#125; 3.5. 将执行脚本配置到package.json1234567&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;nodemon ./bin/www&quot;, &quot;build&quot;: &quot;webpack --progress --config ./webpack/build/webpack.config.js&quot;, &quot;build-dev&quot;: &quot;webpack --progress --watch --config ./webpack/build/webpack.dev.config.js&quot;, &quot;build-dev-server&quot;: &quot;webpack-dev-server --progress --config ./webpack/build/webpack.dev.server.config.js&quot;, &quot;build-dll&quot;: &quot;webpack --progress --config ./webpack/build/webpack.dll.config.js&quot;, &#125;, 后续可以使用以下命令完成打包1234npm run build-dll // 打包公共代码npm run build // 生产环境打包npm run build-dev // 测试环境打包npm run build-dev-server // 开发环境打包 开发调试时设置devtool: ‘eval’, // eval source-map， 不压缩代码， 提高打包速度。 ###未完，待续…]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
</search>
